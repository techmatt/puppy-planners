
This is the protocol for sending requests to the server.

All commands are implicitly prefixed with the server name (ex. http://brethil.stanford.edu:8080/puppies/)

The "main page" can be accessed via either:
/puppies/
/puppies/index.html

All this will do is return \puppy-planners\client-javascript\index.html

Javascript files can also be directly served from the same folder, but while developing, we can just launch index.html directly without the server.

All game commands have the following syntax: (p = puppies; this is just to differentiate it from file requests)
/puppies/p?command?param1=val1&param2=val2&...

"command" is the top-level word for what kind of event this is. When possible, we should try to JSON encode these so it's easier for Javascript to parse.
the order of the parameters is irrelevant.

** Matt's JSON reference (javascript)
object to string: JSON.stringify(javascriptObjectHere)
string to object: JSON.parse(JSONStringHere)

Generally speaking, the server is not concerned with player identity; that's up to the client.

Possible commands:

Generally, commands return a blank string or the requested data. If something goes wrong, they will return a string starting with "error:". Example: trying to join a game that already has 4 players.

 <-- SERVER COMMANDS -->

 ** newSession(sessionName) -> creates a new game session, returning sessionID
   -- sessionName is pretty-print for the name

 ** sessionList() -> returns a JSON list of sessions: ( sessionID : string, sessionName : string, sessionPlayers : string-list )
  -- sessionName is pretty-print for the name, sessionID is a unique ID used to refer to each session.

 ** joinSession(session,playerName,playerRole) -> adds playerName to sessionID
  -- playerName is pretty-print for the player name


 <-- GAME COMMANDS -->
 
 All game commands have a common parameter: session=sessionID

 <QUERY> -> most queries start with "get", but this isn't important
 ** getData() -> returns a JSON list of GameStateData (things like resources, game paused)
 ** getMap() -> returns a JSON list of terrain elements: (x : int, y : int, type : string, modifiers : (string list), building : (building data))
 ** getGameLogSince(time) -> returns all log events since time (clients should repeatedly call this since the last time event)

 <ACTION> -> actions may return a failure string (for example, can happen if two players try to use resources at about the same time)
 ** setPaused(pause)
 ** buildBuilding(x,y,name)